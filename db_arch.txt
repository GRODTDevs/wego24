# This file is the current supabase db structure we will use to create demo data


create table public.activity_log (
  id uuid not null default gen_random_uuid (),
  message text not null,
  timestamp timestamp with time zone null default now(),
  constraint activity_log_pkey primary key (id)
) TABLESPACE pg_default;

create table public.business_metrics_history (
  id uuid not null default gen_random_uuid (),
  metric_date date not null,
  total_orders integer not null default 0,
  total_revenue numeric not null default 0,
  active_partners integer not null default 0,
  active_drivers integer not null default 0,
  total_users integer not null default 0,
  created_at timestamp with time zone not null default now(),
  constraint business_metrics_history_pkey primary key (id),
  constraint business_metrics_history_metric_date_key unique (metric_date)
) TABLESPACE pg_default;

# a row exists
id,metric_date,total_orders,total_revenue,active_partners,active_drivers,total_users,created_at
e5d035eb-8dbe-48a6-8bc9-7861b54d0aa0,2025-07-07,0,0,0,0,2,2025-07-07 02:23:22.507288+00


create table public.driver_availability (
  id uuid not null default gen_random_uuid (),
  driver_id uuid null,
  day_of_week integer not null,
  start_time time without time zone not null,
  end_time time without time zone not null,
  created_at timestamp with time zone null default now(),
  constraint driver_availability_pkey primary key (id),
  constraint driver_availability_driver_id_fkey foreign KEY (driver_id) references drivers (id)
) TABLESPACE pg_default;

create table public.driver_documents (
  id uuid not null default gen_random_uuid (),
  driver_id uuid not null,
  document_type text not null,
  document_url text not null,
  document_name text not null,
  file_size integer null,
  uploaded_at timestamp with time zone null default now(),
  verified_at timestamp with time zone null,
  verified_by uuid null,
  status text null default 'pending'::text,
  constraint driver_documents_pkey primary key (id),
  constraint driver_documents_driver_id_fkey foreign KEY (driver_id) references drivers (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_driver_documents_driver_id on public.driver_documents using btree (driver_id) TABLESPACE pg_default;


create table public.driver_earnings (
  id uuid not null default gen_random_uuid (),
  driver_id uuid null,
  order_id uuid null,
  amount numeric not null,
  payout_requested boolean null default false,
  payout_approved boolean null default false,
  created_at timestamp with time zone null default now(),
  constraint driver_earnings_pkey primary key (id),
  constraint driver_earnings_driver_id_fkey foreign KEY (driver_id) references drivers (id),
  constraint driver_earnings_order_id_fkey foreign KEY (order_id) references orders (id)
) TABLESPACE pg_default;


create table public.driver_feedback (
  id uuid not null default gen_random_uuid (),
  driver_id uuid null,
  order_id uuid null,
  rating integer null,
  comment text null,
  created_at timestamp with time zone null default now(),
  constraint driver_feedback_pkey primary key (id),
  constraint driver_feedback_driver_id_fkey foreign KEY (driver_id) references drivers (id),
  constraint driver_feedback_order_id_fkey foreign KEY (order_id) references orders (id),
  constraint driver_feedback_rating_check check (
    (
      (rating >= 1)
      and (rating <= 5)
    )
  )
) TABLESPACE pg_default;

create table public.driver_locations (
  id uuid not null default gen_random_uuid (),
  driver_id uuid not null,
  latitude numeric not null,
  longitude numeric not null,
  accuracy numeric null,
  heading numeric null,
  speed numeric null,
  timestamp timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  constraint driver_locations_pkey primary key (id),
  constraint driver_locations_driver_id_fkey foreign KEY (driver_id) references drivers (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_driver_locations_driver_id on public.driver_locations using btree (driver_id) TABLESPACE pg_default;

create index IF not exists idx_driver_locations_timestamp on public.driver_locations using btree ("timestamp" desc) TABLESPACE pg_default;



create table public.driver_performance (
  id uuid not null default gen_random_uuid (),
  driver_id uuid not null,
  metric_date date not null,
  total_deliveries integer null default 0,
  successful_deliveries integer null default 0,
  cancelled_deliveries integer null default 0,
  average_delivery_time interval null,
  total_earnings numeric null default 0,
  customer_rating_average numeric null default 0,
  total_reviews integer null default 0,
  on_time_percentage numeric null default 0,
  created_at timestamp with time zone null default now(),
  constraint driver_performance_pkey primary key (id),
  constraint driver_performance_driver_id_metric_date_key unique (driver_id, metric_date),
  constraint driver_performance_driver_id_fkey foreign KEY (driver_id) references drivers (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_driver_performance_driver_id on public.driver_performance using btree (driver_id) TABLESPACE pg_default;

create index IF not exists idx_driver_performance_date on public.driver_performance using btree (metric_date desc) TABLESPACE pg_default;





create table public.drivers (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  vehicle_type text not null,
  vehicle_info jsonb null,
  license_number text null,
  is_active boolean null default true,
  is_available boolean null default false,
  current_location jsonb null,
  rating numeric(3, 2) null default 0,
  total_deliveries integer null default 0,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  email text null,
  first_name text null,
  last_name text null,
  date_of_birth date null,
  address text null,
  city text null,
  postal_code text null,
  emergency_contact_name text null,
  emergency_contact_phone text null,
  license_expiry_date date null,
  insurance_expiry_date date null,
  background_check_status text null default 'pending'::text,
  registration_status text null default 'pending'::text,
  approved_at timestamp with time zone null,
  approved_by uuid null,
  constraint drivers_pkey primary key (id),
  constraint drivers_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint drivers_vehicle_type_check check (
    (
      vehicle_type = any (
        array[
          'car'::text,
          'motorcycle'::text,
          'bicycle'::text,
          'scooter'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_drivers_user_id on public.drivers using btree (user_id) TABLESPACE pg_default;

create table public.menu_categories (
  id uuid not null default gen_random_uuid (),
  restaurant_id uuid not null,
  name text not null,
  description text null,
  display_order integer null default 0,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  sort_order integer null default 0,
  constraint menu_categories_pkey primary key (id),
  constraint menu_categories_restaurant_id_fkey foreign KEY (restaurant_id) references restaurants (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_menu_categories_restaurant_id on public.menu_categories using btree (restaurant_id) TABLESPACE pg_default;

create index IF not exists idx_menu_categories_restaurant on public.menu_categories using btree (restaurant_id, is_active) TABLESPACE pg_default;


create table public.menu_item_variants (
  id uuid not null default gen_random_uuid (),
  menu_item_id uuid null,
  name text not null,
  price_modifier numeric null default 0,
  is_default boolean null default false,
  created_at timestamp with time zone null default now(),
  constraint menu_item_variants_pkey primary key (id),
  constraint menu_item_variants_menu_item_id_fkey foreign KEY (menu_item_id) references menu_items (id) on delete CASCADE
) TABLESPACE pg_default;


create table public.menu_items (
  id uuid not null default gen_random_uuid (),
  restaurant_id uuid not null,
  category_id uuid null,
  name text not null,
  description text null,
  price numeric(10, 2) not null,
  image_url text null,
  status public.menu_item_status null default 'available'::menu_item_status,
  is_featured boolean null default false,
  preparation_time integer null default 15,
  calories integer null,
  allergens text[] null,
  dietary_info text[] null,
  display_order integer null default 0,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint menu_items_pkey primary key (id),
  constraint menu_items_category_id_fkey foreign KEY (category_id) references menu_categories (id) on delete set null,
  constraint menu_items_restaurant_id_fkey foreign KEY (restaurant_id) references restaurants (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_menu_items_category_id on public.menu_items using btree (category_id) TABLESPACE pg_default;

create index IF not exists idx_menu_items_restaurant_id on public.menu_items using btree (restaurant_id) TABLESPACE pg_default;

create index IF not exists idx_menu_items_restaurant_status on public.menu_items using btree (restaurant_id, status) TABLESPACE pg_default;

create index IF not exists idx_menu_items_category on public.menu_items using btree (category_id) TABLESPACE pg_default;




create table public.notifications (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  order_id uuid null,
  type text not null,
  title text not null,
  message text not null,
  is_read boolean not null default false,
  sent_at timestamp with time zone not null default now(),
  delivery_method text[] not null default array['in_app'::text],
  constraint notifications_pkey primary key (id),
  constraint notifications_order_id_fkey foreign KEY (order_id) references orders (id),
  constraint notifications_type_check check (
    (
      type = any (
        array[
          'order_status'::text,
          'driver_assignment'::text,
          'payment'::text,
          'general'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;


create table public.order_items (
  id uuid not null default gen_random_uuid (),
  order_id uuid null,
  menu_item_id uuid null,
  quantity integer not null default 1,
  unit_price numeric(10, 2) not null,
  total_price numeric(10, 2) not null,
  special_instructions text null,
  created_at timestamp with time zone null default now(),
  constraint order_items_pkey primary key (id),
  constraint order_items_menu_item_id_fkey foreign KEY (menu_item_id) references menu_items (id) on delete CASCADE,
  constraint order_items_order_id_fkey foreign KEY (order_id) references orders (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_order_items_order_id on public.order_items using btree (order_id) TABLESPACE pg_default;




create table public.orders (
  id uuid not null default gen_random_uuid (),
  business_id uuid null,
  customer_id uuid null,
  order_number text not null default (
    'ORD-'::text || (
      EXTRACT(
        epoch
        from
          now()
      )
    )::text
  ),
  status text not null default 'pending'::text,
  total_amount numeric(10, 2) not null,
  subtotal numeric(10, 2) not null,
  tax_amount numeric(10, 2) null default 0,
  delivery_fee numeric(10, 2) null default 0,
  service_fee numeric(10, 2) null default 0,
  payment_status text null default 'pending'::text,
  payment_method text null,
  delivery_address jsonb null,
  delivery_instructions text null,
  estimated_delivery_time timestamp with time zone null,
  actual_delivery_time timestamp with time zone null,
  driver_id uuid null,
  notes text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint orders_pkey primary key (id),
  constraint orders_order_number_key unique (order_number),
  constraint orders_driver_id_fkey foreign KEY (driver_id) references auth.users (id) on delete set null,
  constraint orders_business_id_fkey foreign KEY (business_id) references restaurants (id) on delete CASCADE,
  constraint orders_customer_id_fkey foreign KEY (customer_id) references auth.users (id) on delete set null,
  constraint orders_payment_status_check check (
    (
      payment_status = any (
        array[
          'pending'::text,
          'paid'::text,
          'failed'::text,
          'refunded'::text
        ]
      )
    )
  ),
  constraint orders_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'confirmed'::text,
          'preparing'::text,
          'ready'::text,
          'out_for_delivery'::text,
          'delivered'::text,
          'cancelled'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_orders_business_id on public.orders using btree (business_id) TABLESPACE pg_default;

create index IF not exists idx_orders_customer_id on public.orders using btree (customer_id) TABLESPACE pg_default;

create index IF not exists idx_orders_driver_id on public.orders using btree (driver_id) TABLESPACE pg_default;

create index IF not exists idx_orders_status on public.orders using btree (status) TABLESPACE pg_default;




create table public.partner_applications (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  business_name text not null,
  business_type text not null,
  email text not null,
  phone text null,
  address text not null,
  city text not null,
  postal_code text null,
  description text null,
  status text not null default 'pending'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  reviewed_by uuid null,
  reviewed_at timestamp with time zone null,
  rejection_reason text null,
  constraint partner_applications_pkey primary key (id),
  constraint partner_applications_reviewed_by_fkey foreign KEY (reviewed_by) references auth.users (id),
  constraint partner_applications_user_id_fkey foreign KEY (user_id) references auth.users (id),
  constraint partner_applications_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'approved'::text,
          'rejected'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;


create table public.partners (
  id uuid not null default gen_random_uuid (),
  name text not null,
  email text null,
  order_count integer null default 0,
  created_at timestamp with time zone null default now(),
  constraint partners_pkey primary key (id)
) TABLESPACE pg_default;



create table public.payments (
  id uuid not null default gen_random_uuid (),
  order_id uuid null,
  stripe_payment_intent_id text null,
  amount numeric(10, 2) not null,
  currency text null default 'EUR'::text,
  status text not null,
  payment_method text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint payments_pkey primary key (id),
  constraint payments_order_id_fkey foreign KEY (order_id) references orders (id) on delete CASCADE,
  constraint payments_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'succeeded'::text,
          'failed'::text,
          'cancelled'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;



create table public.profiles (
  id uuid not null,
  first_name text null,
  last_name text null,
  email text null,
  phone text null,
  avatar_url text null,
  date_of_birth date null,
  address text null,
  city text null,
  postal_code text null,
  country text null default 'Germany'::text,
  preferred_language text null default 'en'::text,
  phone_verified boolean null default false,
  email_notifications boolean null default true,
  sms_notifications boolean null default false,
  marketing_emails boolean null default false,
  dietary_preferences text[] null,
  allergies text[] null,
  delivery_instructions text null,
  is_active boolean null default true,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  roles jsonb not null default '["user"]'::jsonb,
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

# these profiles are live data not to be deleted but can be used to link users to different tables by user_id

id,first_name,last_name,email,phone,avatar_url,date_of_birth,address,city,postal_code,country,preferred_language,phone_verified,email_notifications,sms_notifications,marketing_emails,dietary_preferences,allergies,delivery_instructions,is_active,created_at,updated_at,roles
8cb87497-c0bb-4d49-b14a-53c1216fc0ab,Shaun,Cheeseman,info@elevatesolutions.online,+34641200994,,,,,,Germany,en,false,true,false,false,,,,true,2025-05-30 08:28:54.213939+00,2025-05-30 08:28:54.213939+00,"[""user"",""admin""]"
f3810be3-af93-49f5-a632-a11f2e69b751,Cleopatra,Costache,cleopatra.costache90@gmail.com,+34711032415,,,,,,Germany,en,false,true,false,false,,,,true,2025-07-06 22:53:44.382572+00,2025-07-06 22:53:44.382572+00,"[""user"",""admin""]"



create table public.restaurant_settings (
  id uuid not null default gen_random_uuid (),
  restaurant_id uuid not null,
  auto_accept_orders boolean null default false,
  max_orders_per_hour integer null default 20,
  advance_order_hours integer null default 24,
  tax_rate numeric(5, 2) null default 0,
  service_charge numeric(5, 2) null default 0,
  payment_methods text[] null default array['cash'::text, 'card'::text],
  special_instructions text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint restaurant_settings_pkey primary key (id),
  constraint restaurant_settings_restaurant_id_key unique (restaurant_id),
  constraint restaurant_settings_restaurant_id_fkey foreign KEY (restaurant_id) references restaurants (id) on delete CASCADE
) TABLESPACE pg_default;



create table public.restaurant_users (
  id uuid not null default gen_random_uuid (),
  restaurant_id uuid not null,
  user_id uuid not null,
  role public.restaurant_role null default 'owner'::restaurant_role,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  constraint restaurant_users_pkey primary key (id),
  constraint restaurant_users_restaurant_id_user_id_key unique (restaurant_id, user_id),
  constraint restaurant_users_restaurant_id_fkey foreign KEY (restaurant_id) references restaurants (id) on delete CASCADE,
  constraint restaurant_users_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_restaurant_users_restaurant_id on public.restaurant_users using btree (restaurant_id) TABLESPACE pg_default;

create index IF not exists idx_restaurant_users_user_id on public.restaurant_users using btree (user_id) TABLESPACE pg_default;


create table public.restaurants (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text null,
  cuisine_type text null,
  email text not null,
  phone text null,
  address text not null,
  city text not null,
  postal_code text null,
  country text null default 'Spain'::text,
  latitude numeric(10, 8) null,
  longitude numeric(11, 8) null,
  status public.restaurant_status null default 'pending'::restaurant_status,
  commission_rate numeric(5, 2) null default 15.00,
  minimum_order_amount numeric(10, 2) null default 0,
  delivery_fee numeric(10, 2) null default 0,
  delivery_time_min integer null default 30,
  delivery_time_max integer null default 60,
  is_delivery_available boolean null default true,
  is_pickup_available boolean null default true,
  operating_hours jsonb null,
  image_url text null,
  banner_url text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  application_id uuid null,
  constraint restaurants_pkey primary key (id),
  constraint restaurants_email_key unique (email),
  constraint restaurants_application_id_fkey foreign KEY (application_id) references partner_applications (id)
) TABLESPACE pg_default;

create index IF not exists idx_restaurants_city on public.restaurants using btree (city) TABLESPACE pg_default;

create index IF not exists idx_restaurants_status on public.restaurants using btree (status) TABLESPACE pg_default;

create trigger on_restaurant_created
after INSERT on restaurants for EACH row
execute FUNCTION handle_new_restaurant ();




create table public.reviews (
  id uuid not null default gen_random_uuid (),
  order_id uuid null,
  business_id uuid null,
  customer_id uuid null,
  driver_id uuid null,
  rating integer not null,
  comment text null,
  review_type text not null,
  is_verified boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint reviews_pkey primary key (id),
  constraint reviews_customer_id_fkey foreign KEY (customer_id) references auth.users (id) on delete CASCADE,
  constraint reviews_driver_id_fkey foreign KEY (driver_id) references drivers (id) on delete set null,
  constraint reviews_business_id_fkey foreign KEY (business_id) references restaurants (id) on delete CASCADE,
  constraint reviews_order_id_fkey foreign KEY (order_id) references orders (id) on delete CASCADE,
  constraint reviews_rating_check check (
    (
      (rating >= 1)
      and (rating <= 5)
    )
  ),
  constraint reviews_review_type_check check (
    (
      review_type = any (
        array['business'::text, 'driver'::text, 'order'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_reviews_business_id on public.reviews using btree (business_id) TABLESPACE pg_default;





create table public.subscribers (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  email text not null,
  stripe_customer_id text null,
  stripe_subscription_id text null,
  subscription_plan_id uuid null,
  subscribed boolean not null default false,
  subscription_status text null default 'inactive'::text,
  current_period_start timestamp with time zone null,
  current_period_end timestamp with time zone null,
  cancel_at_period_end boolean null default false,
  trial_end timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint subscribers_pkey primary key (id),
  constraint subscribers_email_key unique (email),
  constraint subscribers_subscription_plan_id_fkey foreign KEY (subscription_plan_id) references subscription_plans (id),
  constraint subscribers_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;



create table public.subscription_events (
  id uuid not null default gen_random_uuid (),
  subscriber_id uuid null,
  event_type text not null,
  event_data jsonb null,
  stripe_event_id text null,
  processed_at timestamp with time zone null default now(),
  constraint subscription_events_pkey primary key (id),
  constraint subscription_events_subscriber_id_fkey foreign KEY (subscriber_id) references subscribers (id) on delete CASCADE
) TABLESPACE pg_default;


create table public.subscription_plans (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text null,
  price_monthly numeric(10, 2) not null,
  stripe_price_id text null,
  features jsonb null default '[]'::jsonb,
  max_orders_per_month integer null,
  max_restaurants integer null,
  max_drivers integer null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint subscription_plans_pkey primary key (id),
  constraint subscription_plans_stripe_price_id_key unique (stripe_price_id)
) TABLESPACE pg_default;

# some plans have been added no need to add plans

id,name,description,price_monthly,stripe_price_id,features,max_orders_per_month,max_restaurants,max_drivers,is_active,created_at,updated_at
2b73bbff-8de0-40f7-866f-2d16f3ac9747,Professional,Great for growing restaurants,35.00,,"[""Advanced analytics"",""Multi-location support"",""Priority support"",""Custom branding""]",500,3,10,true,2025-07-07 00:53:46.189707+00,2025-07-07 00:53:46.189707+00
438db090-8480-4d89-a923-9b15b4bb6acd,Starter,Perfect for small restaurants getting started,15.00,,"[""Basic dashboard"",""Order management"",""Customer support via email""]",100,1,2,true,2025-07-07 00:53:46.189707+00,2025-07-07 00:53:46.189707+00
6041d32b-79a3-4300-b1be-1e888e61e401,Enterprise,For large restaurant chains,55.00,,"[""Unlimited features"",""White-label solution"",""Dedicated account manager"",""Custom integrations"",""24/7 phone support""]",2000,10,50,true,2025-07-07 00:53:46.189707+00,2025-07-07 00:53:46.189707+00


create table public.usage_tracking (
  id uuid not null default gen_random_uuid (),
  subscriber_id uuid null,
  metric_type text not null,
  count integer null default 0,
  period_start timestamp with time zone not null,
  period_end timestamp with time zone not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint usage_tracking_pkey primary key (id),
  constraint usage_tracking_subscriber_id_metric_type_period_start_key unique (subscriber_id, metric_type, period_start),
  constraint usage_tracking_subscriber_id_fkey foreign KEY (subscriber_id) references subscribers (id) on delete CASCADE
) TABLESPACE pg_default;



create table public.user_roles (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  role public.app_role not null default 'user'::app_role,
  created_at timestamp with time zone not null default now(),
  constraint user_roles_pkey primary key (id),
  constraint user_roles_user_id_role_key unique (user_id, role),
  constraint user_roles_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

# 2 admin users exists 

id,user_id,role,created_at
236e86b1-21d3-4321-aab1-760febf6d9c9,f3810be3-af93-49f5-a632-a11f2e69b751,user,2025-07-06 22:53:44.382572+00
7a3ad0b5-d852-4754-8f09-a290890ed0c0,8cb87497-c0bb-4d49-b14a-53c1216fc0ab,admin,2025-05-30 08:28:54.213939+00